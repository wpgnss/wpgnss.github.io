<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="http://localhost:4000/tag/c-cpp/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" />
  <updated>2022-06-01T12:12:57+09:00</updated>
  <id>http://localhost:4000/tag/c-cpp/feed.xml</id>

  
  
  

  
    <title type="html">Dev with sharing | </title>
  

  
    <subtitle>-</subtitle>
  

  

  
    
      
    
      
				<author>Jehoon Song</author>
        <author>
            <name>Jehoon Song</name>
          
            <email>realjehoon@gmail.com</email>
          
          
        </author>
			
    
  

  
  

  
    <entry>
      <title type="html">Bash 스크립트에서 GDB 실행</title>
      <link href="http://localhost:4000/Bash-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%97%90%EC%84%9C-GDB-%EC%8B%A4%ED%96%89" rel="alternate" type="text/html" title="Bash 스크립트에서 GDB 실행" />
      <published>2022-05-31T00:00:00+09:00</published>
      <updated>2022-05-31T00:00:00+09:00</updated>
      <id>http://localhost:4000/Bash-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%97%90%EC%84%9C-GDB-%EC%8B%A4%ED%96%89</id>
      <content type="html" xml:base="http://localhost:4000/Bash-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%97%90%EC%84%9C-GDB-%EC%8B%A4%ED%96%89">&lt;p&gt;&lt;a href=&quot;https://github.com/wpgnss/bash_gdb&quot;&gt;예제 프로젝트&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;테스트 소스코드&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;다음은 argument를 받아 화면에 출력하는 C 예제 코드입니다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No arguments.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Argument : %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;위 소스코드를 컴파일 하면 바이너리가 생성됩니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcc main.c -o out&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-05-31-Bash-스크립트에서-GDB-실행/Untitled.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;bash 스크립트를 만들어 gdb 실행를 실행합니다,&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

gdb &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--args&lt;/span&gt; out test_args_message

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;bash 스크립트를 실행한 후 RUN (r) 을 입력하면 Argument message 가 출력됩니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash gdb_script.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-05-31-Bash-스크립트에서-GDB-실행/Untitled%201.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Daniel</name>
        
          <email>realjehoon@gmail.com</email>
        
        
      </author>

      

      
        <category term="c_cpp" />
      

      
        <summary type="html">예제 프로젝트</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">const 키워드 사용 정리 (int const *, int * const)</title>
      <link href="http://localhost:4000/difference_const_ptr" rel="alternate" type="text/html" title="const 키워드 사용 정리 (int const *, int * const)" />
      <published>2022-05-06T09:00:00+09:00</published>
      <updated>2022-05-06T09:00:00+09:00</updated>
      <id>http://localhost:4000/difference_const_ptr</id>
      <content type="html" xml:base="http://localhost:4000/difference_const_ptr">&lt;p&gt;&lt;strong&gt;const&lt;/strong&gt; 로 변수를 상수로 선언하기&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; 자료형을 선언할 때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const&lt;/code&gt; 를 사용하면 변수를 상수화 할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;con&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ok&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;con&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const&lt;/code&gt; 는 자료형 앞이나 뒤에 붙여도 상관이 없다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const int&lt;/code&gt; == &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int const&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;이는 포인터를 사용할 때에도 마찬가지이다.&lt;/p&gt;

&lt;p&gt;Read it backwards (as driven by &lt;a href=&quot;http://c-faq.com/decl/spiral.anderson.html&quot;&gt;Clockwise/Spiral Rule&lt;/a&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int*&lt;/code&gt; - pointer to int&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int const *&lt;/code&gt; - pointer to const int&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int * const&lt;/code&gt; - const pointer to int&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int const * const&lt;/code&gt; - const pointer to const int&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const&lt;/code&gt; can be on either side of the type so:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const int *&lt;/code&gt; == &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int const *&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const int * const&lt;/code&gt; == &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int const * const&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to go really crazy you can do things like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int **&lt;/code&gt; - pointer to pointer to int&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int ** const&lt;/code&gt; - a const pointer to a pointer to an int&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int * const *&lt;/code&gt; - a pointer to a const pointer to an int&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int const **&lt;/code&gt; - a pointer to a pointer to a const int&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int * const * const&lt;/code&gt; - a const pointer to a const pointer to an int&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Daniel</name>
        
          <email>realjehoon@gmail.com</email>
        
        
      </author>

      

      
        <category term="c_cpp" />
      

      
        <summary type="html">const 로 변수를 상수로 선언하기</summary>
      

      
      
    </entry>
  
</feed>
